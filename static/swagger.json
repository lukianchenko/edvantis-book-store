{
  "openapi": "3.0.0",
  "info": {
    "description": "Book store API for Edvantis",
    "version": "1.0.0",
    "title": "Book store API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "Book",
      "description": "Everything about books"
    },
    {
      "name": "Author",
      "description": "Operations about authors"
    },
    {
      "name": "Category",
      "description": "Operations about categories"
    },
    {
      "name": "Tag",
      "description": "Operations about tags"
    },
    {
      "name": "Order",
      "description": "Access to orders"
    },
    {
      "name": "User",
      "description": "Operations about user"
    }
  ],
  "servers": [
    {
      "url": "/"
    }
  ],
  "components": {
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                }
              }
            }
          },
          "publish_date": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "price": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "Author": {
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "birth_date": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Author"
        }
      },
      "Category": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Tag": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "User": {
        "required": [
          "first_name",
          "last_name",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "birth_date": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Order": {
        "required": [
          "order_number",
          "books",
          "ship_date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "order_number": {
            "type": "string"
          },
          "books": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                }
              }
            }
          },
          "ship_date": {
            "type": "string"
          },
          "complete": {
            "type": "boolean",
            "default": "False"
          }
        },
        "xml": {
          "name": "Order"
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  },
  "paths": {
    "/book": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Add a new book to the store",
        "description": "",
        "requestBody": {
          "description": "Add book to database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "400": {
            "description": "Add author or category to the book"
          }
        }
      }
    },
    "/book/{id}": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find book by ID",
        "description": "Returns a single book",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of book to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "put": {
        "tags": [
          "Book"
        ],
        "summary": "Update book by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of book to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Update book in database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Book"
        ],
        "summary": "Delete book by ID",
        "description": "Delete a single book",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of book to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "api key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book was deleted"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/books/findByAuthor": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find book by author",
        "description": "Returns an array of books",
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "Author of books to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Something wrong with request"
          },
          "404": {
            "description": "Authors not found"
          }
        }
      }
    },
    "/books/findByCategory": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find book by category",
        "description": "Returns an array of books",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Category of books to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Something wrong with request"
          },
          "404": {
            "description": "Categories not found"
          }
        }
      }
    },
    "/books/findByTag": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find book by tag",
        "description": "Returns an array of books",
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "Tag of books to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Something wrong with request"
          },
          "404": {
            "description": "Tags not found"
          }
        }
      }
    },

    "/author": {
      "post": {
        "tags": [
          "Author"
        ],
        "summary": "Add a new author",
        "description": "",
        "requestBody": {
          "description": "Add author to database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Author"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/category": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add a new category",
        "description": "",
        "requestBody": {
          "description": "Add author to database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/tag": {
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Add a new tag",
        "description": "",
        "requestBody": {
          "description": "Add tag to database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },

    "/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a new user",
        "description": "",
        "requestBody": {
          "description": "Add user to database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Login user",
        "description": "",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password",
            "required": true,
            "schema": {
              "type": "string",
              "format": "password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Authorization required"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by username",
        "description": "Returns a single user",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user by username",
        "description": "",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Update user in database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user by username",
        "description": "Delete a single user",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of user to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "User was deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },

    "/order": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Add a new order",
        "description": "",
        "requestBody": {
          "description": "Add order to database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Add books to the order"
          }
        }
      }
    },
    "/order/{order_number}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Find order by order number",
        "description": "Returns a single order",
        "parameters": [
          {
            "name": "order_number",
            "in": "path",
            "description": "order number to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update order by order number",
        "description": "",
        "parameters": [
          {
            "name": "order_number",
            "in": "path",
            "description": "order number to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Update order in database",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete order by order number",
        "description": "Delete a single order",
        "parameters": [
          {
            "name": "order_number",
            "in": "path",
            "description": "Order number to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Order was deleted"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  }
}
